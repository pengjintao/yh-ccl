SET(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/build/test")
include_directories("${PROJECT_SOURCE_DIR}/src")
link_directories("${PROJECT_BINARY_DIR}/build/lib/"  "/usr/local/glex/lib")
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/test TESTSRC)
add_compile_options(-O3)
add_compile_options(-std=c99)
add_definitions(-w)
FIND_PACKAGE( OpenMP REQUIRED)
if(OPENMP_FOUND)
message("OPENMP FOUND")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

file(GLOB_RECURSE mains RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*.c")
foreach(mainfile IN LISTS mains)
    # Get file name without directory
    get_filename_component(mainname ${mainfile} NAME_WE)
    add_executable(${mainname} ${mainfile})
    target_link_libraries(${mainname} ${MPI_LIBRARIES} -lyhccl -lglex  -lpthread  -lm -lrt -lstdc++)
    #target_link_libraries(${mainname} libic.a)
    target_link_libraries(${mainname} -lrt -lglex ${MPI_LIBRARIES}  -lpthread -lrt -lm)
endforeach()
file(GLOB_RECURSE mains RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*.cc")
add_compile_options(-std=c++11)
foreach(mainfile IN LISTS mains)
    # Get file name without directory
    get_filename_component(mainname ${mainfile} NAME_WE)
    add_executable(${mainname} ${mainfile})
    target_link_libraries(${mainname} ${MPI_LIBRARIES} -lyhccl -lglex  -lpthread -lm -lrt -lstdc++)
    target_link_libraries(${mainname} -lrt -lglex ${MPI_LIBRARIES}  -lpthread -lrt -lm -lstdc++)
endforeach()

